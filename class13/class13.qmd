---
title: "Class13: RNA Seq (pt.1)"
author: "Sion Kang (PID: A17052234)"
date: 02/18/25
format: html
toc: TRUE
---

Today we will analyze data from a published RNA-seq experiment where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al. 2014).

## Import countData and colData

There are two datasets I need to import/read

- `countData` the transcript counts per gene (rows) in the different experiments
- `colData` information (a.k.a. metadata) about the columns (i.e. experiments) in `countData`.

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <- read.csv("airway_metadata.csv")
```

We can have a peak at these with `head()`

```{r}
head(counts)
```

```{r}
metadata
```

> Q1. How many genes are in this dataset?
 
```{r}
nrow(counts)
```
There are 38694 genes in this dataset.

> Q2. How many ‘control’ cell lines do we have?

```{r}
table( metadata$dex )
```
```{r}
sum( metadata$dex == "control" )
```
There are 4 'control' cell lines. 


We can find the average (mean) count values per gene for all "control" experiments and compare it to the mean values for "treated".

- Extract all "control" columns from the `counts` data
- Find the mean value for each gene in these columns

```{r}
control.inds <- metadata$dex == "control"
control.counts <- counts[ , control.inds]
```

```{r}
head(control.counts)
```
Now find the row wise mean

```{r}
control.mean <- rowSums(control.counts)/ncol(control.counts)
head(control.mean)
```
> Q3. How would you make the above code in either approach more robust? Is there a function that could help here?

Using `ncol(control.counts)` when finding the mean would make the code more robust so that the code would still work if the number of samples were to change.

> Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

- Extracting all the "treated" columns and finding the mean value for each gene in these columns
```{r}
treated.inds <- metadata$dex == "treated"
treated.counts <- counts[ ,treated.inds]
treated.mean <- apply(treated.counts, 1, mean)
head(treated.mean)
```
Let's put these two mean values together for easy book-keeping

```{r}
meancounts <- data.frame(control.mean, treated.mean)
head(meancounts)
```
> Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

Let's have a look - i.e. plot control.mean vs. treated.mean

```{r}
plot(meancounts)
```
> Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot?

geom_point()

```{r}
library(ggplot2)

ggplot(meancounts) +
  aes(control.mean, treated.mean) +
  geom_point(alpha=0.3)
```
> Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

Whenever we see data that is so heavily skewed like this we often log transform it so we can see what is going on more easily.

```{r}
plot(meancounts, log="xy")
```

We most often work in log2 units as this makes the math easier. Let's have a play to see this.

```{r}
# treated / control
log2(40/20)
log2(80/20)
log2(20/40)
```

We can now add "log2 fold-change" values to our `meancounts` dataset. 

```{r}
meancounts$log2fc <- log2( meancounts$treated.mean / 
                             meancounts$control.mean )
head(meancounts)
```

We need to filter out zero count genes - i.e. remove the rows (genes) that have a 0 value in either control or treated means. 

```{r}
to.keep <- rowSums( meancounts[ ,1:2] == 0) == 0
mycounts <- meancounts[to.keep, ]
head(mycounts)
```
Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

```{r}
# another method 
# zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

#to.rm <- unique(zero.vals[,1])
#mycounts <- meancounts[-to.rm,]
#head(mycounts)
```


The `arr.ind` argument is used to get the row and column indices of the elements that satisfy the previous condition. The the `unique()` function is called to the first column of the output so that it removes the rows that satisfy the condition of the mean == 0. 

The function that we used keeps the rows where the total count of zeros in the row is equal to 0. 

> Q8. How many genes are "up" regulated at the common log2 fold-change threshold of +2

```{r}
up.inds <- mycounts$log2fc >= 2
sum(up.inds, na.rm=T)
```

> Q9. How many genes are "down" regulated at the threshold of -2?

```{r}
down.inds <- mycounts$log2fc <= (-2)
sum(down.inds, na.rm=T)
```

> Q10. Do you trust these results? Why or why not?

No, because our analysis so far has not considered whether our fold changes are statistically significant or not.

## DESeq2 analysis

To do this the right way we need to counsider the significance of the differences not just their magnitude.

```{r}
#| message: false
library(DESeq2)
```

To use this package it wants countData and colData in a specific format. 

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts, 
                              colData = metadata,
                              design = ~dex)
```

```{r}
dds <- DESeq(dds)
```

Extract my results

```{r}
res <- results(dds)
head(res)
```

Plot of fold-change vs P-value (adjusted for multiple testing)
```{r}
plot(res$log2FoldChange, res$padj)
```

Take the log of the P-value
```{r}
plot(res$log2FoldChange, log(res$padj))
```

We can just flip that y-axis by putting a minus sign on it
```{r}
plot(res$log2FoldChange, -log(res$padj), 
     xlab= "Log2 Fold-change",
     ylab= "-log(P-value)")
```

Let's save our work to date

```{r}
write.csv(res, file="myresults.csv")
```

To finish off let's make a nicer volcano plot

Add the log2 threshold lines at +2/-2
Add P-value threshold line at 0.05
Add color to highlight the subset of genes that meet both of the above thresholdss

Make it with ggplot

```{r}
mycols <- rep("gray", nrow(res))
mycols[res$log2FoldChange >= 2] <- "blue"
mycols[res$log2FoldChange <= -2] <- "blue"
mycols[res$padj > 0.05] <- "gray"
```

```{r}
ggplot(res) +
  aes(log2FoldChange, -log(padj)) +
  geom_point(col=mycols) +
  geom_vline(xintercept = c(-2,2), linetype="dashed", col="red")+
  geom_hline(yintercept= -log(0.05), linetype="dashed", color = "red")
```

## Add gene annotation data

Now the question is what are the blue points in the above volcano plot - i.e. what genes are the most influenced by drug treatment here?

```{r}
head(res)
```

We will use some BioConductor packages to "map" the ENSEMBLE ids to more useful gene SYMBOL names/ids.


We can install these packages with: `BiocManager::install("AnnotationDbi")`
```{r}
library(AnnotationDbi)
library(org.Hs.eg.db)
```


What database identifiers can I translate between here:

```{r}
columns(org.Hs.eg.db)
```

We can now use the `mapIds()` function to translate/map between these different identifier formats.

> Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res$entrez, res$uniprot and res$genename.

Let's add SYMBOL, GENENAME and ENTREZID

```{r}
res$symbol <- mapIds(org.Hs.eg.db, 
                     keys = rownames(res),
                     keytype = "ENSEMBL",
                     column = "SYMBOL")
res$genename <- mapIds(org.Hs.eg.db, 
                     keys = rownames(res),
                     keytype = "ENSEMBL",
                     column = "GENENAME")
res$entrez <- mapIds(org.Hs.eg.db, 
                     keys = rownames(res),
                     keytype = "ENSEMBL",
                     column = "ENTREZID")
res$uniprot <- mapIds(org.Hs.eg.db,
                     keys= rownames(res),
                     column="UNIPROT",
                     keytype="ENSEMBL")
head(res)
```


## Pathway Analysis

Now I know the gene names and their IDs in different databases, I want to what type of biology they are involved in.

This is the job of "pathway analysis" (a.k.a. "gene set enrichment") 

There are tons of different Bioconductor packages for pathway analysis here we use just one of them called **gage** and **pathview**. I will install these with `BiocManager::install(c("gage", "pathview", "gageData"))`

```{r}
library(gage)
library(gageData)
library(pathview)
```

Load up the KEGG genesets
```{r}
data(kegg.sets.hs)
```

```{r}
head(kegg.sets.hs, 2)
```

We will use these KEGG genesets (a.k.a. pathways) and our `res` results to see what overlaps. To do this we will use the `gage()` function. 

For input `gage()` wants just a vector of importance - in our case FoldChange values. 

```{r}
foldchanges <- res$log2FoldChange
```

Vectors in R can have "names" that are useful for bookkeeping so we know what a given value corresponds to

Let's put names on our `foldchanges` vector - here we will use `res$entrez`

```{r}
names(foldchanges) <- res$entrez

```

Now we can run "pathway analysis"

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
head(keggres$less)
```

We can get a pathway image file with our genesets highlighted via the `pathview()` function.

```{r}
pathview(foldchanges, pathway.id="hsa05310")
```
Insert this figure in my report

![](hsa05310.pathview.png)

> Q12. Can you do the same procedure as above to plot the pathview figures for the top 2 down-reguled pathways?

```{r}
pathview(foldchanges, pathway.id="hsa05332")
```
![](hsa05332.pathview.png)

```{r}
pathview(foldchanges, pathway.id="hsa04940")
```
![](hsa04940.pathview.png)

